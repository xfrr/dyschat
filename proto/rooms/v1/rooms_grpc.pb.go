// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: rooms/v1/rooms.proto

package rooms

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomsServiceClient is the client API for RoomsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomsServiceClient interface {
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*ID, error)
	GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*Room, error)
	GetRooms(ctx context.Context, in *GetRoomsRequest, opts ...grpc.CallOption) (*Rooms, error)
	JoinMember(ctx context.Context, in *JoinMemberRequest, opts ...grpc.CallOption) (*Empty, error)
	LeaveMember(ctx context.Context, in *LeaveMemberRequest, opts ...grpc.CallOption) (*Empty, error)
	GetRoomMessages(ctx context.Context, in *GetRoomMessagesRequest, opts ...grpc.CallOption) (*Messages, error)
}

type roomsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomsServiceClient(cc grpc.ClientConnInterface) RoomsServiceClient {
	return &roomsServiceClient{cc}
}

func (c *roomsServiceClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/rooms.RoomsService/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsServiceClient) GetRoom(ctx context.Context, in *GetRoomRequest, opts ...grpc.CallOption) (*Room, error) {
	out := new(Room)
	err := c.cc.Invoke(ctx, "/rooms.RoomsService/GetRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsServiceClient) GetRooms(ctx context.Context, in *GetRoomsRequest, opts ...grpc.CallOption) (*Rooms, error) {
	out := new(Rooms)
	err := c.cc.Invoke(ctx, "/rooms.RoomsService/GetRooms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsServiceClient) JoinMember(ctx context.Context, in *JoinMemberRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rooms.RoomsService/JoinMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsServiceClient) LeaveMember(ctx context.Context, in *LeaveMemberRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/rooms.RoomsService/LeaveMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsServiceClient) GetRoomMessages(ctx context.Context, in *GetRoomMessagesRequest, opts ...grpc.CallOption) (*Messages, error) {
	out := new(Messages)
	err := c.cc.Invoke(ctx, "/rooms.RoomsService/GetRoomMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomsServiceServer is the server API for RoomsService service.
// All implementations must embed UnimplementedRoomsServiceServer
// for forward compatibility
type RoomsServiceServer interface {
	CreateRoom(context.Context, *CreateRoomRequest) (*ID, error)
	GetRoom(context.Context, *GetRoomRequest) (*Room, error)
	GetRooms(context.Context, *GetRoomsRequest) (*Rooms, error)
	JoinMember(context.Context, *JoinMemberRequest) (*Empty, error)
	LeaveMember(context.Context, *LeaveMemberRequest) (*Empty, error)
	GetRoomMessages(context.Context, *GetRoomMessagesRequest) (*Messages, error)
	mustEmbedUnimplementedRoomsServiceServer()
}

// UnimplementedRoomsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoomsServiceServer struct {
}

func (UnimplementedRoomsServiceServer) CreateRoom(context.Context, *CreateRoomRequest) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoomsServiceServer) GetRoom(context.Context, *GetRoomRequest) (*Room, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoom not implemented")
}
func (UnimplementedRoomsServiceServer) GetRooms(context.Context, *GetRoomsRequest) (*Rooms, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRooms not implemented")
}
func (UnimplementedRoomsServiceServer) JoinMember(context.Context, *JoinMemberRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinMember not implemented")
}
func (UnimplementedRoomsServiceServer) LeaveMember(context.Context, *LeaveMemberRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveMember not implemented")
}
func (UnimplementedRoomsServiceServer) GetRoomMessages(context.Context, *GetRoomMessagesRequest) (*Messages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoomMessages not implemented")
}
func (UnimplementedRoomsServiceServer) mustEmbedUnimplementedRoomsServiceServer() {}

// UnsafeRoomsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomsServiceServer will
// result in compilation errors.
type UnsafeRoomsServiceServer interface {
	mustEmbedUnimplementedRoomsServiceServer()
}

func RegisterRoomsServiceServer(s grpc.ServiceRegistrar, srv RoomsServiceServer) {
	s.RegisterService(&RoomsService_ServiceDesc, srv)
}

func _RoomsService_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServiceServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rooms.RoomsService/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServiceServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomsService_GetRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServiceServer).GetRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rooms.RoomsService/GetRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServiceServer).GetRoom(ctx, req.(*GetRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomsService_GetRooms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServiceServer).GetRooms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rooms.RoomsService/GetRooms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServiceServer).GetRooms(ctx, req.(*GetRoomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomsService_JoinMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServiceServer).JoinMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rooms.RoomsService/JoinMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServiceServer).JoinMember(ctx, req.(*JoinMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomsService_LeaveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServiceServer).LeaveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rooms.RoomsService/LeaveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServiceServer).LeaveMember(ctx, req.(*LeaveMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomsService_GetRoomMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoomMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomsServiceServer).GetRoomMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rooms.RoomsService/GetRoomMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomsServiceServer).GetRoomMessages(ctx, req.(*GetRoomMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomsService_ServiceDesc is the grpc.ServiceDesc for RoomsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rooms.RoomsService",
	HandlerType: (*RoomsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _RoomsService_CreateRoom_Handler,
		},
		{
			MethodName: "GetRoom",
			Handler:    _RoomsService_GetRoom_Handler,
		},
		{
			MethodName: "GetRooms",
			Handler:    _RoomsService_GetRooms_Handler,
		},
		{
			MethodName: "JoinMember",
			Handler:    _RoomsService_JoinMember_Handler,
		},
		{
			MethodName: "LeaveMember",
			Handler:    _RoomsService_LeaveMember_Handler,
		},
		{
			MethodName: "GetRoomMessages",
			Handler:    _RoomsService_GetRoomMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rooms/v1/rooms.proto",
}
