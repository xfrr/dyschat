syntax = "proto3";

package rooms;

option go_package = "github.com/xfmrr/randchat/proto/rooms";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Rooms Service"
    version: "1.0.0"
  }

  schemes: HTTP
  schemes: HTTPS
  consumes: "application/json"
  produces: "application/json"
	
  security_definitions: {
		security: {
			key: "UserKey"
			value: {
				type: TYPE_API_KEY
				in: IN_HEADER
				name: "authorization"
			}
		}
  }
  responses: {
		key: "400"
		value: {
			description: "Malformed request payload."
		}
	}
  responses: {
		key: "401"
		value: {
			description: "Invalid or missing authorization header."
		}
	}
    responses: {
		key: "403"
		value: {
			description: "User does not have access to this resource."
		}
	}
	responses: {
		key: "404"
		value: {
			description: "Resource not found."
		}
	}
};

service RoomsService {
  rpc CreateRoom (CreateRoomRequest) returns (ID) {
    option (google.api.http) = {
      post: "/rooms"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			security: {
				security_requirement: {
					key: "UserKey"
					value: {}
				}
			}
		};
  }
  rpc GetRoom (GetRoomRequest) returns (Room) {
    option (google.api.http) = {
      get: "/rooms/{room_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			security: {
				security_requirement: {
					key: "UserKey"
					value: {}
				}
			}
		};
  }
  rpc GetRooms (GetRoomsRequest) returns (Rooms) {
    option (google.api.http) = {
      get: "/rooms"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			security: {
				security_requirement: {
					key: "UserKey"
					value: {}
				}
			}
		};
  }

  rpc JoinMember (JoinMemberRequest) returns (Empty) {
    option (google.api.http) = {
      post: "/rooms/{room_id}/members/{member_id}"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "UserKey"
          value: {}
        }
      }
    };
  }

  rpc LeaveMember (LeaveMemberRequest) returns (Empty) {
    option (google.api.http) = {
      delete: "/rooms/{room_id}/members/{member_id}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "UserKey"
          value: {}
        }
      }
    };
  }

  rpc GetRoomMessages (GetRoomMessagesRequest) returns (Messages) {
    option (google.api.http) = {
      get: "/rooms/{room_id}/messages"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security: {
        security_requirement: {
          key: "UserKey"
          value: {}
        }
      }
    };
  }
}

message CreateRoomRequest {
  string id                 = 1;
  string name               = 2;
  string secret_key         = 3;
  int64  max_members        = 4;
  int64  max_messages       = 5;
}

message GetRoomRequest  {
  string room_id     = 1;
}

message GetRoomsRequest {
  string order_by = 1;
}

message JoinMemberRequest {
  string room_id     = 1;
  string member_id   = 2;
  string secret_key  = 3;
}

message LeaveMemberRequest {
  string room_id     = 1;
  string member_id   = 2;
}

message Rooms {
  repeated Room rooms     = 1;
}

message Room {
  string            id         = 1;
  string            name       = 2;
  string            secret_key = 3;
  RoomStatus        status     = 4;
  repeated Member   members    = 5;
}

message Member {
  string          id      = 1;
  MemberStatus    status  = 3;
}

message GetRoomMessagesRequest {
  string room_id = 1;

  int64 start_timestamp = 2;
  int64 end_timestamp   = 3;
}

message Messages {
  repeated Message messages = 1;
}

message Message {
  string id         = 1;
  string room_id    = 2;
  string member_id  = 3;
  string content    = 4;
  int64  timestamp  = 5;
}

enum MemberStatus {
  UNKNOWN = 0;
  ONLINE  = 1;
  OFFLINE = 2;
}

enum RoomStatus {
  CREATED   = 0;
  MATCHING  = 1;
  MATCHED   = 2;
  CANCELLED = 3;
}

message ID {
  string id         = 1;
  string secret_key = 2;
}

message Empty {}