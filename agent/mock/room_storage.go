// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/xfrr/dyschat/agent"
	"sync"
)

// Ensure, that RoomStorageMock does implement agent.RoomStorage.
// If this is not the case, regenerate this file with moq.
var _ agent.RoomStorage = &RoomStorageMock{}

// RoomStorageMock is a mock implementation of agent.RoomStorage.
//
// 	func TestSomethingThatUsesRoomStorage(t *testing.T) {
//
// 		// make and configure a mocked agent.RoomStorage
// 		mockedRoomStorage := &RoomStorageMock{
// 			DeleteFunc: func(ctx context.Context, roomID string)  {
// 				panic("mock out the Delete method")
// 			},
// 			GetFunc: func(ctx context.Context, roomID string) (*agent.Room, error) {
// 				panic("mock out the Get method")
// 			},
// 			SaveFunc: func(ctx context.Context, room *agent.Room) error {
// 				panic("mock out the Save method")
// 			},
// 		}
//
// 		// use mockedRoomStorage in code that requires agent.RoomStorage
// 		// and then make assertions.
//
// 	}
type RoomStorageMock struct {
	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, roomID string)

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, roomID string) (*agent.Room, error)

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, room *agent.Room) error

	// calls tracks calls to the methods.
	calls struct {
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoomID is the roomID argument value.
			RoomID string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// RoomID is the roomID argument value.
			RoomID string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Room is the room argument value.
			Room *agent.Room
		}
	}
	lockDelete sync.RWMutex
	lockGet    sync.RWMutex
	lockSave   sync.RWMutex
}

// Delete calls DeleteFunc.
func (mock *RoomStorageMock) Delete(ctx context.Context, roomID string) {
	if mock.DeleteFunc == nil {
		panic("RoomStorageMock.DeleteFunc: method is nil but RoomStorage.Delete was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		RoomID string
	}{
		Ctx:    ctx,
		RoomID: roomID,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	mock.DeleteFunc(ctx, roomID)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedRoomStorage.DeleteCalls())
func (mock *RoomStorageMock) DeleteCalls() []struct {
	Ctx    context.Context
	RoomID string
} {
	var calls []struct {
		Ctx    context.Context
		RoomID string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *RoomStorageMock) Get(ctx context.Context, roomID string) (*agent.Room, error) {
	if mock.GetFunc == nil {
		panic("RoomStorageMock.GetFunc: method is nil but RoomStorage.Get was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		RoomID string
	}{
		Ctx:    ctx,
		RoomID: roomID,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, roomID)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedRoomStorage.GetCalls())
func (mock *RoomStorageMock) GetCalls() []struct {
	Ctx    context.Context
	RoomID string
} {
	var calls []struct {
		Ctx    context.Context
		RoomID string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *RoomStorageMock) Save(ctx context.Context, room *agent.Room) error {
	if mock.SaveFunc == nil {
		panic("RoomStorageMock.SaveFunc: method is nil but RoomStorage.Save was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Room *agent.Room
	}{
		Ctx:  ctx,
		Room: room,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, room)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//     len(mockedRoomStorage.SaveCalls())
func (mock *RoomStorageMock) SaveCalls() []struct {
	Ctx  context.Context
	Room *agent.Room
} {
	var calls []struct {
		Ctx  context.Context
		Room *agent.Room
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
