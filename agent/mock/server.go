// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/xfrr/dyschat/agent"
	"sync"
)

// Ensure, that ServerMock does implement agent.Server.
// If this is not the case, regenerate this file with moq.
var _ agent.Server = &ServerMock{}

// ServerMock is a mock implementation of agent.Server.
//
// 	func TestSomethingThatUsesServer(t *testing.T) {
//
// 		// make and configure a mocked agent.Server
// 		mockedServer := &ServerMock{
// 			StartFunc: func(contextMoqParam context.Context) error {
// 				panic("mock out the Start method")
// 			},
// 		}
//
// 		// use mockedServer in code that requires agent.Server
// 		// and then make assertions.
//
// 	}
type ServerMock struct {
	// StartFunc mocks the Start method.
	StartFunc func(contextMoqParam context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// Start holds details about calls to the Start method.
		Start []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
		}
	}
	lockStart sync.RWMutex
}

// Start calls StartFunc.
func (mock *ServerMock) Start(contextMoqParam context.Context) error {
	if mock.StartFunc == nil {
		panic("ServerMock.StartFunc: method is nil but Server.Start was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
	}{
		ContextMoqParam: contextMoqParam,
	}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	return mock.StartFunc(contextMoqParam)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedServer.StartCalls())
func (mock *ServerMock) StartCalls() []struct {
	ContextMoqParam context.Context
} {
	var calls []struct {
		ContextMoqParam context.Context
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}
